export class CustomValidator {
    static patternValidator(regex, error) {
        return (control) => {
            if (!control.value) {
                return null;
            }
            const valid = regex.test(control.value);
            return valid ? null : error;
        };
    }
    static passwordMatchValidator(control) {
        var _a, _b, _c;
        const password = (_a = control.get('newpassword')) === null || _a === void 0 ? void 0 : _a.value;
        const confirmPassword = (_b = control.get('conformpassword')) === null || _b === void 0 ? void 0 : _b.value;
        if (password !== confirmPassword) {
            (_c = control.get('conformpassword')) === null || _c === void 0 ? void 0 : _c.setErrors({ NoPassswordMatch: true });
        }
    }
    static validateSsn() {
        return (control) => {
            const error = {};
            const data = control.value.split('');
            const val = data[0] + data[1] + data[2];
            function between(x, min, max) {
                return x >= min && x <= max;
            }
            if (val === '666' || val === '900' || val === '999') {
                error['firstgroup'] = true;
            }
            if (data.includes('0')) {
                error['hasZero'] = true;
            }
            const test = data[0] + data[1] + data[2] + data[4] + data[5] + data[7] + data[8] + data[9] + data[10];
            if (between(test, 987654320, 987654329)) {
                error['mediaSsn'] = true;
            }
            return error;
        };
    }
    static validateTelephone() {
        return (control) => {
            const error = {};
            const data = control.value.split('');
            if (data[0] === '0' || data[1] === '1' || data[0] === '1' || data[1] === '0') {
                error['hasZero'] = true;
            }
            return error;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtY29yZS9wcm9maWxlL3NyYy9saWIvcGljcy1wcm9maWxlL0Bjb3JlL3ZhbGlkYXRvci9jdXN0b20tdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxlQUFlO0lBQzFCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFhLEVBQUUsS0FBdUI7UUFDNUQsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDbEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM5QixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLHNCQUFzQixDQUFDLE9BQXdCOztRQUNwRCxNQUFNLFFBQVEsR0FBVyxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLDBDQUFFLEtBQUssQ0FBQztRQUMzRCxNQUFNLGVBQWUsR0FBVyxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsMENBQUUsS0FBSyxDQUFDO1FBQ3RFLElBQUksUUFBUSxLQUFLLGVBQWUsRUFBRTtZQUNoQyxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsMENBQUUsU0FBUyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVztRQUNoQixPQUFPLENBQUMsT0FBd0IsRUFBb0IsRUFBRTtZQUNwRCxNQUFNLEtBQUssR0FBcUIsRUFBRSxDQUFDO1lBQ25DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsT0FBTyxDQUFDLENBQU0sRUFBRSxHQUFRLEVBQUUsR0FBUTtnQkFDekMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDOUIsQ0FBQztZQUNELElBQUksR0FBRyxLQUFLLEtBQUssSUFBSSxHQUFHLEtBQUssS0FBSyxJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7Z0JBQ25ELEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDNUI7WUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3RCLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDekI7WUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUN2QyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQzFCO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQjtRQUN0QixPQUFPLENBQUMsT0FBd0IsRUFBb0IsRUFBRTtZQUNwRCxNQUFNLEtBQUssR0FBcUIsRUFBRSxDQUFDO1lBQ25DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDNUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUN6QjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21WYWxpZGF0b3Ige1xyXG4gIHN0YXRpYyBwYXR0ZXJuVmFsaWRhdG9yKHJlZ2V4OiBSZWdFeHAsIGVycm9yOiBWYWxpZGF0aW9uRXJyb3JzKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgaWYgKCFjb250cm9sLnZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdmFsaWQgPSByZWdleC50ZXN0KGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICByZXR1cm4gdmFsaWQgPyBudWxsIDogZXJyb3I7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XHJcbiAgICBjb25zdCBwYXNzd29yZDogc3RyaW5nID0gY29udHJvbC5nZXQoJ25ld3Bhc3N3b3JkJyk/LnZhbHVlO1xyXG4gICAgY29uc3QgY29uZmlybVBhc3N3b3JkOiBzdHJpbmcgPSBjb250cm9sLmdldCgnY29uZm9ybXBhc3N3b3JkJyk/LnZhbHVlO1xyXG4gICAgaWYgKHBhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgY29udHJvbC5nZXQoJ2NvbmZvcm1wYXNzd29yZCcpPy5zZXRFcnJvcnMoeyBOb1Bhc3Nzd29yZE1hdGNoOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlU3NuKCk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyA9PiB7XHJcbiAgICAgIGNvbnN0IGVycm9yOiBWYWxpZGF0aW9uRXJyb3JzID0ge307XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBjb250cm9sLnZhbHVlLnNwbGl0KCcnKTtcclxuICAgICAgY29uc3QgdmFsID0gZGF0YVswXSArIGRhdGFbMV0gKyBkYXRhWzJdO1xyXG4gICAgICBmdW5jdGlvbiBiZXR3ZWVuKHg6IGFueSwgbWluOiBhbnksIG1heDogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHggPj0gbWluICYmIHggPD0gbWF4O1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh2YWwgPT09ICc2NjYnIHx8IHZhbCA9PT0gJzkwMCcgfHwgdmFsID09PSAnOTk5Jykge1xyXG4gICAgICAgIGVycm9yWydmaXJzdGdyb3VwJ10gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkYXRhLmluY2x1ZGVzKCcwJykpIHtcclxuICAgICAgICBlcnJvclsnaGFzWmVybyddID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB0ZXN0ID0gZGF0YVswXSArIGRhdGFbMV0gKyBkYXRhWzJdICsgZGF0YVs0XSArIGRhdGFbNV0gKyBkYXRhWzddICsgZGF0YVs4XSArIGRhdGFbOV0gKyBkYXRhWzEwXTtcclxuICAgICAgaWYgKGJldHdlZW4odGVzdCwgOTg3NjU0MzIwLCA5ODc2NTQzMjkpKSB7XHJcbiAgICAgICAgZXJyb3JbJ21lZGlhU3NuJ10gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmFsaWRhdGVUZWxlcGhvbmUoKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzID0+IHtcclxuICAgICAgY29uc3QgZXJyb3I6IFZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgICAgY29uc3QgZGF0YSA9IGNvbnRyb2wudmFsdWUuc3BsaXQoJycpO1xyXG4gICAgICBpZiAoZGF0YVswXSA9PT0gJzAnIHx8IGRhdGFbMV0gPT09ICcxJyB8fCBkYXRhWzBdID09PSAnMScgfHwgZGF0YVsxXSA9PT0gJzAnKSB7XHJcbiAgICAgICAgZXJyb3JbJ2hhc1plcm8nXSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19